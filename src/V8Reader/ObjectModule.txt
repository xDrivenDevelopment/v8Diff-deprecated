//==============================================================================================================================================
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБЪЕКТА
//==============================================================================================================================================

Перем КоллекцияВременныхФайлов Экспорт;
Перем СоответствиеИдентификаторов Экспорт;
Перем СтрокаИндикатора;

//==============================================================================================================================================
// ФУНКЦИИ ДЛЯ АНАЛИЗА УЗЛОВ ДОКУМЕНТА DOM, ПОЛУЧЕННОГО ИЗ ВНУТРЕННЕГО ФОРМАТА 1С из публикации http://infostart.ru/public/57431/ от tormozit
//==============================================================================================================================================

Функция СтрокаВнутрВХМЛТело(вхСтрока) Экспорт //изначально было предложено brix8x в комментариях к публикации http://infostart.ru/public/17139/
	
	//{ Получение одной длинной строки
	выхХМЛТело = СтрЗаменить(вхСтрока,СИМВОЛЫ.ПС,"#%");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,СИМВОЛЫ.ВК,"#%");
	//}
	
	//{ Заменяем символы, критичные для XML
	// & на "&amp;"
	// < на "&lt;"
	// > на "&gt;"
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"&","&amp;");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"<","&lt;");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,">","&gt;");
	//}
	
	//{Решаем проблему с кавычками:
	выхХМЛТело=СтрЗаменить(выхХМЛТело,"""""","^$^$");
	выхХМЛТело =СтрЗаменить(выхХМЛТело,"""",Символы.ПС+"^$");
	//}
	
	ТекстДок=Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(выхХМЛТело);
	новХМЛТелоДок=Новый ТекстовыйДокумент;
	Максимум=СтрЧислоСтрок(выхХМЛТело);
	
	//{Обрабатываем документ построчно:
	КавычкаОткрыта=истина;
	Для НомерСтроки=1 по Максимум цикл
		КавычкаОткрыта=Не КавычкаОткрыта;
		СтрокаДляВыводаСостояния="Построение XML:           ";
		ИзобразитьИндикаторВСтрокеСостояния(СтрокаДляВыводаСостояния,НомерСтроки,Максимум);
		выхСтрока=ТекстДок.ПолучитьСтроку(НомерСтроки);
		Если КавычкаОткрыта=истина тогда
			
			//{Решаем проблему с получением модуля в управляемой форме
			выхСтрока=СтрЗаменить(выхСтрока,"#%",Символы.ВК);
			//}
			
			новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
			
			Продолжить;
			
		КонецЕсли;
		
		//{ Замена одинарных символов
		выхСтрока = СтрЗаменить(выхСтрока,",","</data><data>");
		выхСтрока = СтрЗаменить(выхСтрока,"{","<elem><data>");
		выхСтрока = СтрЗаменить(выхСтрока,"}","</data></elem>");
		//}
		
		новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
		
	КонецЦикла;
	
	новХМЛТело=новХМЛТелоДок.ПолучитьТекст();
	//}
	
	//{ Восстановление кавычек
	новХМЛТело=СтрЗаменить(новХМЛТело,Символы.ПС+"^$","^$");
	новХМЛТело=СтрЗаменить(новХМЛТело,"^$","""");
	новХМЛТело=СтрЗаменить(новХМЛТело,"#%","");
	//}
	
	//{ Удаление лишних блоков 
	новХМЛТело = СтрЗаменить(новХМЛТело,"<data><elem>","<elem>");
	новХМЛТело = СтрЗаменить(новХМЛТело,"</elem></data>","</elem>");
	//}
	
	//{ Добавление переносов строк для удобства поиска различий
	новХМЛТело = СтрЗаменить(новХМЛТело,"</elem>","</elem>"+СИМВОЛЫ.ПС);
	новХМЛТело = СтрЗаменить(новХМЛТело,"</data>","</data>"+СИМВОЛЫ.ПС);
	//}
	
	Возврат новХМЛТело;
	
КонецФункции

Функция ПолучитьДокументDOMФормы(XMLСтрокаФормы) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрокаФормы);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	Возврат ДокументDOM;
	
КонецФункции 

//==============================================================================================================================================
// ПРОЦЕДУРЫ ПАРСИНГА МОДУЛЕЙ
//==============================================================================================================================================

Функция ПолучитьТаблицуПроцедурМодуля(ТекстМодуля) Экспорт //с определением достоверного источника затрудняюсь
	
	ТаблицаПроцедурМодуля = Новый ТаблицаЗначений;
	ТаблицаПроцедурМодуля.Колонки.Добавить("ИмяПроцедуры",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаПроцедурМодуля.Колонки.Добавить("ТекстПроцедуры",        Новый ОписаниеТипов("Строка"));
	ТаблицаПроцедурМодуля.Колонки.Добавить("ВидПроцедуры",          Новый ОписаниеТипов("Число"));
	ТаблицаПроцедурМодуля.Колонки.Добавить("ИндексНачалаПроцедуры", Новый ОписаниеТипов("Число"));
	ТаблицаПроцедурМодуля.Колонки.Добавить("ДлинаПроцедуры",        Новый ОписаниеТипов("Число"));
	
	Если ПустаяСтрока(ТекстМодуля) Тогда
		Возврат ТаблицаПроцедурМодуля;
	КонецЕсли;
	
	ТекущийМодуль = Новый ТекстовыйДокумент();	
	ТекущийМодуль.УстановитьТекст(ТекстМодуля);
	
	НомерСтрокиНачалаОператоров = 1;
	НомерСтрокиОкончанияПеременных = ТекущийМодуль.КоличествоСтрок();
	
	ТекстПроцедуры = "";
	СписокОператоров = Новый СписокЗначений;
	СписокОператоров.Добавить("процедура ","конецпроцедуры");
	СписокОператоров.Добавить("функция ","конецфункции");
	
	Для каждого Оператор Из СписокОператоров Цикл
		НайденоНачало = Ложь;
		НайденКонец = Ложь;
		ОператорНачала = Оператор.Значение;
		ОператорКонца = Оператор.Представление;
		ДлинаНачала = СтрДлина(ОператорНачала);
		ДлинаКонца = СтрДлина(ОператорКонца);
		
		ИндексНачалаПроцедуры = 0;
		ДлинаПроцедуры  = 0;
		
		ВидПроцедуры = ?(ОператорНачала = "процедура ", 0, 1);
		
		Для Сч = 1 По ТекущийМодуль.КоличествоСтрок() Цикл
			СтрокаМодуля = ТекущийМодуль.ПолучитьСтроку(Сч);
			
			Если НЕ НайденоНачало Тогда
				ОператорСтроки = Лев(НРег(СокрЛП(СтрокаМодуля)),ДлинаНачала);
				
				НайденоНачало = (ОператорСтроки = ОператорНачала);
				
				Если НайденоНачало Тогда
					ИндексНачалаПроцедуры = ПолучитьНомерСтрокиНачалаКомментарияПроцедуры(Сч, ТекущийМодуль, ТекстПроцедуры);
					
					Поз = Найти(СтрокаМодуля, "(");
					Если Поз = 0 Тогда
						Поз = СтрДлина(СтрокаМодуля);
					Иначе
						Поз = Поз - 1;
					КонецЕсли;
					ИмяПроцедуры = СокрЛП(Сред(СтрокаМодуля, ДлинаНачала + 1, Поз - ДлинаНачала));
					
					Если ИндексНачалаПроцедуры < НомерСтрокиОкончанияПеременных Тогда
						НомерСтрокиОкончанияПеременных = ИндексНачалаПроцедуры - 1;
					КонецЕсли; 
					
				Иначе
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			Если НайденоНачало Тогда
				ТекстПроцедуры = ?(ТекстПроцедуры = "", "", ТекстПроцедуры + Символы.ПС) + СтрокаМодуля;
			КонецЕсли;
			
			НайденКонец = Лев(НРег(СокрЛП(СтрокаМодуля)),ДлинаКонца) = ОператорКонца;
			//Проверим, что дальше не значащий символ
			Если НайденКонец
				И НЕ ПустаяСтрока(Сред(СокрЛ(СтрокаМодуля),ДлинаКонца+1,1))
				И Сред(СтрокаМодуля,ДлинаКонца+1,1)<>"/"
				Тогда
				
				НайденКонец = Ложь;
			КонецЕсли; 
			
			Если НайденКонец Тогда
				ДлинаПроцедуры = Сч - ИндексНачалаПроцедуры + 1;
				
				Если ТекстПроцедуры <> "" Тогда
					ТекстПроцедурыДляЗаписи = ТекстПроцедуры;
					
					СвойстваПроцедуры = Новый Структура;
					СвойстваПроцедуры.Вставить("ИндексНачалаПроцедуры", ИндексНачалаПроцедуры);
					СвойстваПроцедуры.Вставить("ДлинаПроцедуры", ДлинаПроцедуры);
					СвойстваПроцедуры.Вставить("ТекстПроцедурыДляЗаписи", ТекстПроцедурыДляЗаписи);
					СвойстваПроцедуры.Вставить("ВидПроцедуры", ВидПроцедуры);
					
					ОбработатьПроцедуру(ИмяПроцедуры, ТаблицаПроцедурМодуля, СвойстваПроцедуры);
					
					ТекстПроцедуры = "";
				КонецЕсли;
				
				Если Сч > НомерСтрокиНачалаОператоров Тогда
					НомерСтрокиНачалаОператоров = Сч + 1;
				КонецЕсли; 
				НайденоНачало = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	// Создадим модуль раздела переменных
	Если НомерСтрокиНачалаОператоров <> 1 Тогда
		
		ТекстПеременныхМодуля = Новый ТекстовыйДокумент();
		Для Сч = 1 По НомерСтрокиОкончанияПеременных Цикл
			СтрокаМодуля = ТекущийМодуль.ПолучитьСтроку(Сч);
			ТекстПеременныхМодуля.ДобавитьСтроку(СтрокаМодуля);
		КонецЦикла; 
		
		Если ТекстПеременныхМодуля.КоличествоСтрок() <> 0 Тогда
			СвойстваПроцедуры = Новый Структура;
			СвойстваПроцедуры.Вставить("ИндексНачалаПроцедуры", 1);
			СвойстваПроцедуры.Вставить("ДлинаПроцедуры", НомерСтрокиОкончанияПеременных);
			СвойстваПроцедуры.Вставить("ТекстПроцедурыДляЗаписи", ТекстПеременныхМодуля.ПолучитьТекст());
			СвойстваПроцедуры.Вставить("ВидПроцедуры", 2);
			
			ОбработатьПроцедуру("_РазделПеременных_", ТаблицаПроцедурМодуля, СвойстваПроцедуры);
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Создадим модуль раздела операторов
	ТекстОператоровМодуля = Новый ТекстовыйДокумент();
	Для Сч = НомерСтрокиНачалаОператоров По ТекущийМодуль.КоличествоСтрок() Цикл
		СтрокаМодуля = ТекущийМодуль.ПолучитьСтроку(Сч);
		ТекстОператоровМодуля.ДобавитьСтроку(СтрокаМодуля);
	КонецЦикла; 
	
	Если ТекстОператоровМодуля.КоличествоСтрок() <> 0 Тогда
		СвойстваПроцедуры = Новый Структура;
		СвойстваПроцедуры.Вставить("ИндексНачалаПроцедуры", НомерСтрокиНачалаОператоров);
		СвойстваПроцедуры.Вставить("ДлинаПроцедуры", ТекущийМодуль.КоличествоСтрок() - НомерСтрокиНачалаОператоров + 1);
		СвойстваПроцедуры.Вставить("ТекстПроцедурыДляЗаписи", ТекстОператоровМодуля.ПолучитьТекст());
		СвойстваПроцедуры.Вставить("ВидПроцедуры", 3);
		
		ОбработатьПроцедуру("_РазделОператоров_", ТаблицаПроцедурМодуля, СвойстваПроцедуры);
	КонецЕсли; 
	
	Возврат ТаблицаПроцедурМодуля;
	
КонецФункции

Функция ПолучитьНомерСтрокиНачалаКомментарияПроцедуры(НомерСтрокиНачалаПроцедуры, ТекущийМодуль, ТекстПроцедуры) //с определением достоверного источника затрудняюсь
	
	Если НомерСтрокиНачалаПроцедуры = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	НомерСтрокиНачалаКомментарияПроцедуры = НомерСтрокиНачалаПроцедуры;
	СтрокаМодуля = ТекущийМодуль.ПолучитьСтроку(НомерСтрокиНачалаКомментарияПроцедуры - 1);
	СтрокаМодуля = СокрЛ(СтрокаМодуля);
	
	Пока Лев(СтрокаМодуля, 2) = "//" 
		ИЛИ Лев(СтрокаМодуля, 1) = "&" Цикл
		
		ТекстПроцедуры = СтрокаМодуля + ?(ТекстПроцедуры = "", "", Символы.ПС + ТекстПроцедуры);
		НомерСтрокиНачалаКомментарияПроцедуры = НомерСтрокиНачалаКомментарияПроцедуры - 1;
		Если НомерСтрокиНачалаКомментарияПроцедуры = 1 Тогда
			Прервать;
		КонецЕсли;
		СтрокаМодуля = ТекущийМодуль.ПолучитьСтроку(НомерСтрокиНачалаКомментарияПроцедуры - 1);
	КонецЦикла; 
	
	Возврат НомерСтрокиНачалаКомментарияПроцедуры;
	
КонецФункции  

Процедура ОбработатьПроцедуру(ИмяПроцедуры, ТаблицаПроцедурМодуля, СвойстваПроцедуры) //с определением достоверного источника затрудняюсь
	
	ПроцедураОбъект = ТаблицаПроцедурМодуля.Добавить();
	ПроцедураОбъект.ИмяПроцедуры = ИмяПроцедуры;
	ПроцедураОбъект.ИндексНачалаПроцедуры = СвойстваПроцедуры.ИндексНачалаПроцедуры;
	ПроцедураОбъект.ДлинаПроцедуры        = СвойстваПроцедуры.ДлинаПроцедуры;
	ПроцедураОбъект.ТекстПроцедуры        = СвойстваПроцедуры.ТекстПроцедурыДляЗаписи;
	ПроцедураОбъект.ВидПроцедуры          = СвойстваПроцедуры.ВидПроцедуры;
	
КонецПроцедуры 

Процедура ПолучитьТаблицуСтруктурногоСравнения(ВремТабПервогоМодуля,ВремТабВторогоМодуля,СтруктурноеСравнениеМодуля,ТолькоИзмененные) Экспорт
	
	Для каждого ТекущаяСтрока Из ВремТабПервогоМодуля Цикл
		СтрокаСравнения = ВремТабВторогоМодуля.Найти(ТекущаяСтрока.ИмяПроцедуры,"ИмяПроцедуры");
		Если ТолькоИзмененные = Ложь Тогда
			НоваяСтрока = СтруктурноеСравнениеМодуля.Добавить();
			НоваяСтрока.СтруктураПервогоМодуля = ТекущаяСтрока.ИмяПроцедуры;
			НоваяСтрока.ТекстПервогоЭлемента   = ТекущаяСтрока.ТекстПроцедуры;
			НоваяСтрока.ТипПервый			   = ТекущаяСтрока.ВидПроцедуры;
			НоваяСтрока.Сортировка 			   = ТекущаяСтрока.ИмяПроцедуры;
		КонецЕсли;
		Если СтрокаСравнения <> Неопределено  Тогда
			Если ТолькоИзмененные = Истина И СтрокаСравнения.ТекстПроцедуры <> ТекущаяСтрока.ТекстПроцедуры Тогда
				НоваяСтрока = СтруктурноеСравнениеМодуля.Добавить();
				НоваяСтрока.СтруктураПервогоМодуля = ТекущаяСтрока.ИмяПроцедуры;
				НоваяСтрока.ТекстПервогоЭлемента   = ТекущаяСтрока.ТекстПроцедуры;
				НоваяСтрока.ТипПервый			   = ТекущаяСтрока.ВидПроцедуры;
				НоваяСтрока.Сортировка 			   = ТекущаяСтрока.ИмяПроцедуры;
				НоваяСтрока.СтруктураВторогоМодуля = СтрокаСравнения.ИмяПроцедуры;
				НоваяСтрока.ТекстВторогоЭлемента   = СтрокаСравнения.ТекстПроцедуры;
				НоваяСтрока.ТипВторой			   = СтрокаСравнения.ВидПроцедуры;
				НоваяСтрока.ЕстьИзменения = 1;
			ИначеЕсли ТолькоИзмененные = Ложь Тогда
				НоваяСтрока.СтруктураВторогоМодуля = СтрокаСравнения.ИмяПроцедуры;
				НоваяСтрока.ТекстВторогоЭлемента   = СтрокаСравнения.ТекстПроцедуры;
				НоваяСтрока.ТипВторой			   = СтрокаСравнения.ВидПроцедуры;
				Если  	СтрокаСравнения.ТекстПроцедуры <> ТекущаяСтрока.ТекстПроцедуры тогда
					НоваяСтрока.ЕстьИзменения = 1;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаСравнения = Неопределено Тогда
			Если ТолькоИзмененные = Истина Тогда
				НоваяСтрока = СтруктурноеСравнениеМодуля.Добавить();
				НоваяСтрока.СтруктураПервогоМодуля = ТекущаяСтрока.ИмяПроцедуры;
				НоваяСтрока.ТекстПервогоЭлемента   = ТекущаяСтрока.ТекстПроцедуры;
				НоваяСтрока.Сортировка 			   = ТекущаяСтрока.ИмяПроцедуры;
				НоваяСтрока.ТипПервый			   = ТекущаяСтрока.ВидПроцедуры;
			КонецЕсли;
			НоваяСтрока.СтруктураВторогоМодуля = "<Отсутствует>";
			НоваяСтрока.ТекстВторогоЭлемента   = "";
			НоваяСтрока.ЕстьИзменения          = 2;
		КонецЕсли;                  
	КонецЦикла;
	
	Для каждого Строка Из ВремТабВторогоМодуля Цикл
		Если ВремТабПервогоМодуля.Найти(Строка.ИмяПроцедуры,"ИмяПроцедуры") = Неопределено Тогда
			НоваяСтрока = СтруктурноеСравнениеМодуля.Добавить();
			НоваяСтрока.СтруктураПервогоМодуля = "<Отсутствует>"; 
			НоваяСтрока.СтруктураВторогоМодуля = Строка.ИмяПроцедуры;
			НоваяСтрока.ТекстВторогоЭлемента   = Строка.ТекстПроцедуры;
			НоваяСтрока.ТипПервый              = Строка.ВидПроцедуры;
			НоваяСтрока.ТипВторой              = Строка.ВидПроцедуры;
			НоваяСтрока.Сортировка             = Строка.ИмяПроцедуры;
			НоваяСтрока.ЕстьИзменения          = 3;
		КонецЕсли;
	КонецЦикла;
	
	СтруктурноеСравнениеМодуля.Сортировать("Сортировка возр");
	
	//помещаем строку _РазделПеременных_ в самое начало
	СтрокаПеременных = СтруктурноеСравнениеМодуля.Найти("_РазделПеременных_","Сортировка");
	Если СтрокаПеременных <> Неопределено Тогда
		Если СтрокаПеременных.ЕстьИзменения <> 0 Тогда
			СтруктурноеСравнениеМодуля.Сдвинуть(СтрокаПеременных,-СтруктурноеСравнениеМодуля.Индекс(СтрокаПеременных));
		ИначеЕсли ТолькоИзмененные=Ложь Тогда
			СтруктурноеСравнениеМодуля.Удалить(СтрокаПеременных);
		КонецЕсли;
	КонецЕсли;
	//помещаем строку _РазделОператоров_ в самый конец
	СтрокаОператоров = СтруктурноеСравнениеМодуля.Найти("_РазделОператоров_","Сортировка");
	Если СтрокаОператоров <> Неопределено Тогда
		Если СтрокаОператоров.ЕстьИзменения <> 0 Тогда
			Смещение = СтруктурноеСравнениеМодуля.Количество()-СтруктурноеСравнениеМодуля.Индекс(СтрокаОператоров)-1;
			СтруктурноеСравнениеМодуля.Сдвинуть(СтрокаОператоров,Смещение);
		ИначеЕсли ТолькоИзмененные=Ложь Тогда
			СтруктурноеСравнениеМодуля.Удалить(СтрокаОператоров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//==============================================================================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//==============================================================================================================================================

Процедура ОткрытьВПроводнике(Файл) Экспорт
	
	SA=Новый COMОбъект("Shell.Application");
	Cч=SA.Windows().Count;
	SA.Explore(Файл.Путь);
	Пока SA.Windows().Count=Cч цикл
	КонецЦикла;
	Инд=1;
	Для каждого  window из SA.Windows() цикл
		Если  Инд=SA.Windows().Count и window.LocationURL="file:///"+СтрЗаменить(СтрЗаменить(Лев(Файл.Путь,СтрДлина(Файл.Путь)-1),"\","/")," ","%20") тогда
			window.Document.SelectItem(Файл.ПолноеИмя,16+8+1);
		КонецЕсли;
		Инд=Инд+1;
	КонецЦикла;
	Возврат;
	
КонецПроцедуры

Функция ПолучитьСтандартныйРеквизитИзВнутреннегоПредставления(ВидМетаданных) Экспорт
	
	Если ВидМетаданных="Справочник" Тогда
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v6,v7,v8,v10","СтандартныйРеквизит.Код","СтандартныйРеквизит.Наименование","СтандартныйРеквизит.Родитель","СтандартныйРеквизит.Владелец","СтандартныйРеквизит.ЭтоГруппа","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.Предопределенный");
	ИначеЕсли ВидМетаданных="Документ" Тогда
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v7","СтандартныйРеквизит.Номер","СтандартныйРеквизит.Дата","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.Проведен");
	ИначеЕсли ВидМетаданных="ЖурналДокументов" Тогда
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v4,v7,v100,v101,v60003","СтандартныйРеквизит.Номер","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Проведен","СтандартныйРеквизит.Дата","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.Тип");
	ИначеЕсли ВидМетаданных="ПланВидовХарактеристик" Тогда
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v4,v5,v6,v7,v8,v9,v11","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Предопределенный","СтандартныйРеквизит.Родитель","СтандартныйРеквизит.ЭтоГруппа","СтандартныйРеквизит.Код","СтандартныйРеквизит.Наименование","СтандартныйРеквизит.ТипЗначения");
	ИначеЕсли ВидМетаданных="ПланСчетов" Тогда
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v4,v5,v6,v7,v8,v10,v11,v12,v17","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Предопределенный","СтандартныйРеквизит.Родитель","СтандартныйРеквизит.Код","СтандартныйРеквизит.Наименование","СтандартныйРеквизит.Вид","СтандартныйРеквизит.Забалансовый","РеквизитСтандартнойТабличнойЧасти.ВидыСубконто","СтандартныйРеквизит.Порядок");
	ИначеЕсли ВидМетаданных="ПланВидовРасчета" Тогда
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v6,v8,v10,v20,v30","СтандартныйРеквизит.Код","СтандартныйРеквизит.Наименование","СтандартныйРеквизит.ПериодДействияБазовый","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.Предопределенный","РеквизитСтандартнойТабличнойЧасти.БазовыеВидыРасчета","РеквизитСтандартнойТабличнойЧасти.ВытесняющиеВидыРасчета","РеквизитСтандартнойТабличнойЧасти.ВедущиеВидыРасчета");
	ИначеЕсли ВидМетаданных="РегистрСведений" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5","СтандартныйРеквизит.Период","СтандартныйРеквизит.Регистратор","СтандартныйРеквизит.НомерСтроки","СтандартныйРеквизит.Активность");
	ИначеЕсли ВидМетаданных="РегистрНакопления" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v9","СтандартныйРеквизит.Период","СтандартныйРеквизит.Регистратор","СтандартныйРеквизит.НомерСтроки","СтандартныйРеквизит.Активность","СтандартныйРеквизит.ВидДвижения");
	ИначеЕсли ВидМетаданных="РегистрБухгалтерии" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v9,v10","СтандартныйРеквизит.Период","СтандартныйРеквизит.Регистратор","СтандартныйРеквизит.НомерСтроки","СтандартныйРеквизит.Активность","СтандартныйРеквизит.ВидДвижения","СтандартныйРеквизит.Счет");
	ИначеЕсли ВидМетаданных="РегистрРасчета" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v13","СтандартныйРеквизит.Регистратор","СтандартныйРеквизит.НомерСтроки","СтандартныйРеквизит.ВидРасчета","СтандартныйРеквизит.ПериодДействия","СтандартныйРеквизит.ПериодДействияНачало","СтандартныйРеквизит.ПериодДействияКонец","СтандартныйРеквизит.БазовыйПериодНачало","СтандартныйРеквизит.БазовыйПериодКонец","СтандартныйРеквизит.Активность","СтандартныйРеквизит.Сторно","СтандартныйРеквизит.ПериодРегистрации");
	ИначеЕсли ВидМетаданных="БизнесПроцесс" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v7,v8,v9","СтандартныйРеквизит.Номер","СтандартныйРеквизит.Дата","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.Завершен","СтандартныйРеквизит.ВедущаяЗадача","СтандартныйРеквизит.Стартован");
	ИначеЕсли ВидМетаданных="Задача" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v5,v7,v8,v9,v10","СтандартныйРеквизит.Номер","СтандартныйРеквизит.Дата","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.БизнесПроцесс","СтандартныйРеквизит.ТочкаМаршрута","СтандартныйРеквизит.Наименование","СтандартныйРеквизит.Выполнена");
	ИначеЕсли ВидМетаданных="ПланОбмена" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v2,v3,v4,v6,v9,v10","СтандартныйРеквизит.Код","СтандартныйРеквизит.Наименование","СтандартныйРеквизит.ПометкаУдаления","СтандартныйРеквизит.Ссылка","СтандартныйРеквизит.НомерОтправленного","СтандартныйРеквизит.НомерПринятого");
	ИначеЕсли ВидМетаданных="ТабличнаяЧасть" Тогда	
		СтруктураСтандартныхРеквизитов=Новый Структура("v3,v10","СтандартныйРеквизит.НомерСтроки","СтандартныйРеквизит.НомерСтроки");
	КонецЕсли;
	
	Возврат СтруктураСтандартныхРеквизитов;
	
КонецФункции

Процедура ИзобразитьИндикаторВСтрокеСостояния(Строка,Счетчик,Максимум) Экспорт//Идея из публикации http://infostart.ru/public/59581/ от Шепота Теней
	Строка=Строка+СтрЗаменить(Лев(СтрокаИндикатора,Цел(Счетчик / (Максимум / 100))),"'","|")+Прав(СтрокаИндикатора,100-Цел(Счетчик / (Максимум / 100)));
	Состояние(Строка);
КонецПроцедуры

Функция ТекстовоеСравнениеВоВременныхФайлах(ПервыйТекст,ВторойТекст) Экспорт
	
	ПервыйВременныйФайлРаспаковки = ПолучитьИмяВременногоФайла("txt");
	ВторойВременныйФайлРаспаковки = ПолучитьИмяВременногоФайла("txt");
	ТекстПервогоФайла=Новый ТекстовыйДокумент;
	ТекстПервогоФайла.УстановитьТекст(ПервыйТекст);
	ТекстПервогоФайла.Записать(ПервыйВременныйФайлРаспаковки);
	ТекстВторогоФайла=Новый ТекстовыйДокумент;
	ТекстВторогоФайла.УстановитьТекст(ВторойТекст);
	ТекстВторогоФайла.Записать(ВторойВременныйФайлРаспаковки);
	СравнениеВременныхФайлов=Новый СравнениеФайлов;
	СравнениеВременныхФайлов.ПервыйФайл=ПервыйВременныйФайлРаспаковки;
	СравнениеВременныхФайлов.ВторойФайл=ВторойВременныйФайлРаспаковки;
	СравнениеВременныхФайлов.СпособСравнения=СпособСравненияФайлов.ТекстовыйДокумент;
	СравнениеВременныхФайлов.УчитыватьРегистр = Истина;
	СравнениеВременныхФайлов.ИгнорироватьПустоеПространство=Истина;
	
	Возврат СравнениеВременныхФайлов;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
// Общий модуль СтроковыеФункцииКлиентСервер.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
//&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Процедура СравненниеПроизвольныхФайлов(Путь1, Путь2) Экспорт
	
	Сравнение = Новый СравнениеФайлов;
	Сравнение.ПервыйФайл = ФайлКонфигурации;
	Сравнение.ВторойФайл = ФайлОбновления;
	Сравнение.ИгнорироватьПустоеПространство = Истина;
	Сравнение.УчитыватьРегистр = Истина;
	
	Попытка
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
		Сравнение.ПоказатьРазличия();
	Исключение
		Попытка
			Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
			Сравнение.ПоказатьРазличия();
		Исключение
			Сравнение.СпособСравнения = СпособСравненияФайлов.Двоичное;
			Сравнение.ПоказатьРазличия();
		КонецПопытки;
	КонецПопытки;
	Возврат;	
	
КонецПроцедуры

Функция Версия() Экспорт
	
	Версия = "1.9";
	Возврат Версия;
	
КонецФункции

//==============================================================================================================================================
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//==============================================================================================================================================

СтрокаИндикатора="''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''";


